geneAnots <- select(thePackage, myProbes, c("SYMBOL", "ENTREZID", "GENENAME"))
annotatedTopTab<- merge(x=geneAnots, y=topTab, by.x="PROBEID", by.y="PROBEID")
return(annotatedTopTab)
}
topAnnotated_seleccionats= annotatedTopTable(seleccionats, anotPackage = "hta20transcriptcluster.db" )
require(GOstats)
listOfTables <- list(AvsB = resSig, AvsL = resSig_NIT_ELI, BvsL = resSig_SFI_ELI)
for (i in 1:length(listOfTables)){
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el an´alisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab$id, "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el an´alisis
# Este an´alisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
geneIds <- unique(getEG(rownames(topTab)[whichGenes],"hgu133a.db"))
# Creamos los "hiperpar´ametros" en que se basa el an´alisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los an´alisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
}
require(GOstats)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GOstats")
require(GOstats)
listOfTables <- list(AvsB = resSig, AvsL = resSig_NIT_ELI, BvsL = resSig_SFI_ELI)
for (i in 1:length(listOfTables)){
# Seleccionamos la "topTable"
topTab <- listOfTables[[i]]
# Definimos el universo de genes: todos los que se han incluido en el an´alisis
# EL programa trabaja con identificadores "entrez" y no admite duplicados
entrezUniverse = unique(getEG(topTab$id, "hgu133a.db"))
# Escogemos los grupos de sondas a incluir en el an´alisis
# Este an´alisis trabaja bien con varios centenares de genes
# por lo que es habitual basarse en p-valores sin ajustar para incluirlos
geneIds <- unique(getEG(rownames(topTab)[whichGenes],"hgu133a.db"))
# Creamos los "hiperpar´ametros" en que se basa el an´alisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
# KEGGparams = new("KEGGHyperGParams",
# geneIds=geneIds, universeGeneIds=entrezUniverse,
# annotation="org.Hs.eg.db",
# pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los an´alisis
GOhyper = hyperGTest(GOparams)
# KEGGhyper = hyperGTest(KEGGparams)
# Creamos un informe html con los resultados
comparison = names(listOfTables)[i]
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
# KEGGfilename =file.path(resultsDir,
# paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
# htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
}
non_duplicates <- which(duplicated(resSig$symbol) == FALSE)
resSig= resSig[non_duplicates, ]
mapped_genes2GO <- mappedkeys(org.Hs.egGO)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(pathview)
library(clusterProfiler)
library(org.Hs.eg.db)
library(DOSE)
library(pathview)
library(clusterProfiler)
library(AnnotationHub)
library(ensembldb)
library(tidyverse)
non_duplicates <- which(duplicated(resSig$symbol) == FALSE)
resSig= resSig[non_duplicates, ]
mapped_genes2GO <- mappedkeys(org.Hs.egGO)
mapped_genes2KEGG <- mappedkeys(org.Hs.egPATH)
mapped_genes <- union(mapped_genes2GO , mapped_genes2KEGG)
universe <- mapped_genes
sigOE_genes <- as.character(resSig$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.05,
readable = TRUE)
cluster_summary <- data.frame(ego)
write.csv(cluster_summary, "results/clusterProfiler_Mov10oe.csv")
non_duplicates <- which(duplicated(resSig$symbol) == FALSE)
resSig= resSig[non_duplicates, ]
mapped_genes2GO <- mappedkeys(org.Hs.egGO)
mapped_genes2KEGG <- mappedkeys(org.Hs.egPATH)
mapped_genes <- union(mapped_genes2GO , mapped_genes2KEGG)
universe <- mapped_genes
sigOE_genes <- as.character(resSig$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.5,
readable = TRUE)
cluster_summary <- data.frame(ego)
write.csv(cluster_summary, "results/clusterProfiler_Mov10oe.csv")
resSig
sigOE_genes
universe
non_duplicates <- which(duplicated(resSig$symbol) == FALSE)
resSig= resSig[non_duplicates, ]
mapped_genes2GO <- mappedkeys(org.Hs.egENSEMBL)
mapped_genes2KEGG <- mappedkeys(org.Hs.egPATH)
mapped_genes <- union(mapped_genes2GO , mapped_genes2KEGG)
universe <- mapped_genes
sigOE_genes <- as.character(resSig$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 0.5,
readable = TRUE)
cluster_summary <- data.frame(ego)
write.csv(cluster_summary, "results/clusterProfiler_Mov10oe.csv")
head(universe)
non_duplicates <- which(duplicated(resSig$symbol) == FALSE)
resSig= resSig[non_duplicates, ]
mapped_genes2GO <- mappedkeys(org.Hs.egENSEMBL)
mapped_genes2KEGG <- mappedkeys(org.Hs.egPATH)
mapped_genes <- union(mapped_genes2GO , mapped_genes2KEGG)
universe <- mapped_genes
sigOE_genes <- as.character(resSig$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pAdjustMethod = "BH",
qvalueCutoff = 1,
readable = TRUE)
cluster_summary <- data.frame(ego)
write.csv(cluster_summary, "results/clusterProfiler_Mov10oe.csv")
sum(resSig$padj < 0.1, na.rm=TRUE)
sum(resSig$padj < 0.5, na.rm=TRUE)
sum(resSig$padj < 1, na.rm=TRUE)
View(resSig)
sum(res$padj < 1, na.rm=TRUE)
View(res)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pvalueCutoff = 0.05,
pAdjustMethod = "none",
qvalueCutoff = 1,
readable = TRUE)
enrichGO
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pvalueCutoff = 0.05,
pAdjustMethod = "none",
qvalueCutoff = 0.1,
readable = TRUE)
sigOE_genes <- as.character(resSig_NIT_ELI$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pvalueCutoff = 0.05,
pAdjustMethod = "none",
qvalueCutoff = 0.1,
readable = TRUE)
View(res_NIT_ELI)
View(res_SFI_ELI)
View(res_SFI_ELI)
resSig_SFI_ELI = res_SFI_ELI[ res$padj < 0.1, ]
head( resSig_SFI_ELI [ order(resSig_SFI_ELI $padj), ] )
View(resSig_SFI_ELI)
View(resSig_SFI_ELI)
resSig_SFI_ELI = res_SFI_ELI[ res$pval < 0.1, ]
head( resSig_SFI_ELI [ order(resSig_SFI_ELI $pval), ] )
resSig_SFI_ELI = res_SFI_ELI[ res_SFI_ELI$pval < 0.1, ]
head( resSig_SFI_ELI [ order(resSig_SFI_ELI $pval), ] )
library("AnnotationDbi")
library("org.Hs.eg.db")
resSig_SFI_ELI$symbol <- mapIds(org.Hs.eg.db,
keys = resSig_SFI_ELI$id,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
resSig_SFI_ELI$entrez <- mapIds(org.Hs.eg.db,
keys = resSig_SFI_ELI$id,
column = "ENTREZID",
keytype = "ENSEMBL",
multiVals = "first")
resOrdered <- resSig[order(resSig_SFI_ELI$padj),]
head(resOrdered)
library("AnnotationDbi")
library("org.Hs.eg.db")
resSig_SFI_ELI$symbol <- mapIds(org.Hs.eg.db,
keys = resSig_SFI_ELI$id,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
resSig_SFI_ELI$entrez <- mapIds(org.Hs.eg.db,
keys = resSig_SFI_ELI$id,
column = "ENTREZID",
keytype = "ENSEMBL",
multiVals = "first")
resOrdered_SFI_ELI <- resSig[order(resSig_SFI_ELI$padj),]
head(resOrdered)
View(resOrdered_SFI_ELI)
library("AnnotationDbi")
library("org.Hs.eg.db")
resSig_SFI_ELI$symbol <- mapIds(org.Hs.eg.db,
keys = resSig_SFI_ELI$id,
column = "SYMBOL",
keytype = "ENSEMBL",
multiVals = "first")
resSig_SFI_ELI$entrez <- mapIds(org.Hs.eg.db,
keys = resSig_SFI_ELI$id,
column = "ENTREZID",
keytype = "ENSEMBL",
multiVals = "first")
resOrdered_SFI_ELI <- resSig_SFI_ELI[order(resSig_SFI_ELI$padj),]
head(resOrdered)
View(resOrdered_SFI_ELI)
View(resOrdered_SFI_ELI)
sigOE_genes <- as.character(resSig_NIT_ELI$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pvalueCutoff = 0.05,
pAdjustMethod = "none",
qvalueCutoff = 0.1,
readable = TRUE)
sigOE_genes <- as.character(resOrdered_SFI_ELI$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pvalueCutoff = 0.05,
pAdjustMethod = "none",
qvalueCutoff = 0.1,
readable = TRUE)
mapped_genes2GO <- mappedkeys(org.Hs.egGO)
mapped_genes2KEGG <- mappedkeys(org.Hs.egPATH)
mapped_genes <- union(mapped_genes2GO , mapped_genes2KEGG)
universe <- mapped_genes
sigOE_genes <- as.character(resOrdered_SFI_ELI$id)
ego <- enrichGO(gene = sigOE_genes,
universe = universe,
keyType = "ENSEMBL",
OrgDb = org.Hs.eg.db,
ont = "BP",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
qvalueCutoff = 0.1,
readable = TRUE)
cluster_summary <- data.frame(ego)
write.csv(cluster_summary, "results/clusterProfiler_Mov10oe.csv")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resOrdered_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resOrdered_SFI_ELI$id
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resOrdered_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resOrdered_SFI_ELI$id
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 1,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resOrdered_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resOrdered_SFI_ELI$id
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resOrdered_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resOrdered_SFI_ELI$id
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resSig_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resSig_SFI_ELI$id
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resSig_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resSig_SFI_ELI$symbol
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resSig_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resSig_SFI_ELI$symbol
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "SYMBOL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resSig_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resSig_SFI_ELI$symbol
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "SYMBOL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(org.Hs.eg.db)
library(clusterProfiler)
# we want the log2 fold change
original_gene_list <- resOrdered_SFI_ELI$log2FoldChange
# name the vector
names(original_gene_list) <- resOrdered_SFI_ELI$id
# omit any NA values
gene_list<-na.omit(original_gene_list)
head(gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list, decreasing = TRUE)
gse <- gseGO(geneList=gene_list,
ont ="BP",
keyType = "ENSEMBL",
minGSSize = 3,
maxGSSize = 800,
seed = FALSE,
pvalueCutoff = 0.05,
verbose = TRUE,
OrgDb = org.Hs.eg.db,
pAdjustMethod = "BH")
library(ReactomePA)
listOfData <- resOrdered_SFI_ELI$symbol
comparisonsNames <- names(listOfData)
comparisonsNames
library(ReactomePA)
listOfData <- resOrdered_SFI_ELI$symbol
comparisonsNames <- names(listOfData)
universe <- mapped_genes
for (i in 1:length(listOfData)){
genesIn <- listOfData[[i]]
comparison <- comparisonsNames[i]
enrich.result <- enrichPathway(gene = genesIn,
pvalueCutoff = 0.1,
readable = T,
pAdjustMethod = "BH",
organism = "human",
universe = universe)
cat("##################################")
cat("\nComparison: ", comparison,"\n")
print(head(enrich.result))
write.csv(as.data.frame(enrich.result),
file =paste0("./results/","ReactomePA.Results.",comparison,".csv"),
row.names = FALSE)
pdf(file=paste0("./results/","ReactomePABarplot.",comparison,".pdf"))
print(barplot(enrich.result, showCategory = 15, font.size = 4,
title = paste0("Reactome Pathway Analysis for ", comparison,". Barplot")))
dev.off()
pdf(file = paste0("./results/","ReactomePAcnetplot.",comparison,".pdf"))
print(cnetplot(enrich.result, categorySize = "geneNum", schowCategory = 15,
vertex.label.cex = 0.75))
dev.off()
}
